package controllers.customer;

import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;

import controllers.SceneSwitcher;
import enums.StatusEnum;
import enums.TypeOrder;
import javafx.collections.FXCollections;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import model.Account;
import model.Customer;
import model.HappenStatus;
import model.Order;
import repository.HappenStatusRepository;
import repository.OrderRepository;
import service.CustomerService;
import utils.Session;

public class BookAppointmentController {

	@FXML
	private Label lblWelcome;

	@FXML
	private Label lblCustomerInfo;

	@FXML
	private Label lblEmail;

	@FXML
	private ComboBox<String> cbServices;

	@FXML
	private ComboBox<String> cbTime;

	@FXML
	private DatePicker dpDate;

	@FXML
	private Label lblBookingInfo;

	@FXML
	public void initialize() {
		Account currentUser = Session.getCurrentUser();
		if (currentUser != null) {
			lblWelcome.setText("üêæ Xin ch√†o, " + currentUser.getUserName());
			lblCustomerInfo.setText("T√™n kh√°ch h√†ng: " + currentUser.getUserName());
			lblEmail.setText("Email: " + currentUser.getEmail());

			// T·∫°o danh s√°ch d·ªãch v·ª• cho ComboBox
			cbServices.setItems(FXCollections.observableArrayList("D·ªãch v·ª• 1", "D·ªãch v·ª• 2", "D·ªãch v·ª• 3"));

			// T·∫°o danh s√°ch gi·ªù cho ComboBox
			cbTime.setItems(FXCollections.observableArrayList("08:00 AM", "09:00 AM", "10:00 AM"));
		} else {
			lblWelcome.setText("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng tin.");
		}
	}

	@FXML
	private void handleBack() {
		SceneSwitcher.switchScene("customer/customerDashboard.fxml");
	}

	@FXML
	private void handleLogout() {
		Session.logout();
		SceneSwitcher.switchScene("login.fxml");
	}

	@FXML
	private void handleBookAppointment() {
		// Ki·ªÉm tra c√°c tr∆∞·ªùng
		if (cbServices.getValue() == null || cbTime.getValue() == null || dpDate.getValue() == null) {
			Alert alert = new Alert(AlertType.WARNING);
			alert.setTitle("Th√¥ng b√°o");
			alert.setHeaderText("Ch∆∞a ch·ªçn ƒë·ªß th√¥ng tin");
			alert.setContentText("Vui l√≤ng ch·ªçn d·ªãch v·ª•, th·ªùi gian v√† ng√†y ƒë·ªÉ ƒë·∫∑t l·ªãch.");
			alert.showAndWait();
			return;
		}

		// L·∫•y th√¥ng tin t·ª´ UI
		String service = cbServices.getValue();
		String timeStr = cbTime.getValue(); // V√≠ d·ª• "08:00"
		DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("hh:mm a");
		LocalTime localTime = LocalTime.parse(timeStr, timeFormatter);
		LocalDate localDate = dpDate.getValue(); // LocalDate t·ª´ DatePicker
		LocalDateTime localDateTime = localDate.atTime(localTime);
		Timestamp appointmentTimestamp = Timestamp.valueOf(localDateTime);

		// L·∫•y Account v√† chuy·ªÉn sang Customer
		Account acc = Session.getCurrentUser();
		Customer currentCustomer = null;
		try {
			currentCustomer = CustomerService.getInstance().getCustomerById(acc.getAccountID());
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} // ƒê√∫ng ki·ªÉu Customer

		// T·∫°o Order
		Order appointmentOrder = new Order();
		appointmentOrder.setOrderDate(new Timestamp(System.currentTimeMillis()));
		appointmentOrder.setAppointmentDate(appointmentTimestamp);
		appointmentOrder.setOrderType(TypeOrder.APPOINTMENT);
		appointmentOrder.setCustomer(currentCustomer); // Gi·ªù ƒë√∫ng ki·ªÉu
		HappenStatus status = HappenStatusRepository.getInstance().findByStatusCode(StatusEnum.PENDING);
		appointmentOrder.setHappenStatus(status);

		int result = OrderRepository.getInstance().insert(appointmentOrder);
		if (result > 0) {
			lblBookingInfo.setText("üêæ L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng!");
		} else {
			lblBookingInfo.setText("‚ùå ƒê·∫∑t l·ªãch th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
		}

	}

}
